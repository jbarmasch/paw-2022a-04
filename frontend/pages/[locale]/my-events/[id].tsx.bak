import {useEffect, useState} from 'react';
import Footer from '../../components/footer';
import Layout from '../../layouts/Main';
import Breadcrumb from '../../components/breadcrumb';
import ProductsFeatured from '../../components/products-featured';
import Description from '../../components/product-single/description';
import {server} from '../../utils/server';

import useSwr from "swr";
import Image from "next/image";
import ProductItemLoading from "../../components/product-item/loading";
import Content from "../../components/product-single/content";
import {useRouter} from "next/router";
import {BookingType, TicketType} from "../../types";
import BookingItem from "../../components/booking-item";
import TableRows from "../../components/table-rows"
import * as React from "react";
import {useForm} from "react-hook-form";
import {toInteger} from "lodash";
import {retry} from "@reduxjs/toolkit/query";

const Product = () => {
    const [showBlock, setShowBlock] = useState('description');

    const fetcher = (url: string) => fetch(url).then((res) => res.json());

    const router = useRouter();

    const [rowsData, setRowsData] = useState([]);
    const [index, setIndex] = useState(0);

    const { register, handleSubmit, control, watch, formState: { errors } } = useForm();

    const { data : event, error : errorData } = useSwr(router.query.id ? `${server}/api/events/${router.query.id}` : null, fetcher)
    const { data : tickets, error : errorTickets } = useSwr(event ? `${event.tickets}` : null, fetcher)
    const { data : aux, error : error } = useSwr(event ? `${event.image}` : null, fetcher)

    useEffect(() => {
        let aux = index
        if (tickets) {
            const rows = [];

            tickets.map((item: TicketType) => {
                const rowsInput = {
                    id: 0,
                    ticketName: '',
                    price: '',
                    qty: '',
                    booked: '',
                    maxPerUser: '',
                    starting: '',
                    until: ''
                }
                // const rowsInput = [...rowsData];
                rowsInput["id"] = aux++;
                rowsInput["ticketName"] = item.ticketName;
                rowsInput["price"] = item.price;
                rowsInput["qty"] = item.qty;
                rowsInput["booked"] = item.booked;
                rowsInput["maxPerUser"] = item.maxPerUser;
                if (item.starting) {
                    rowsInput["starting"] = item.starting;
                }
                if (item.until) {
                    rowsInput["until"] = item.until;
                }
                rows.push(rowsInput)
                // setRowsData(rowsInput)
            })

            setRowsData(rows)
            setIndex(aux)
        }
    }, [tickets]);

    if (error || errorData) return <p>No data</p>
    if (!aux || !event || (!errorTickets && !tickets)) return <ProductItemLoading/>

    const addTableRows = ()=>{
        if (rowsData.length >= 5) {
            alert("SAY NO MORE")
            return
        }

        let index = rowsData.length
        console.log(index)

        const rowsInput={
            id: 0,
            ticketName: '',
            price: '',
            qty: '',
            booked: '',
            maxPerUser: '',
            starting: '',
            until: ''
        }

        let auxVar = '{' +
            '"ticketName' + index + '": "",' +
            '"price' + index + '": "",' +
            '"qty' + index + '": "",' +
            '"booked' + index + '": "",' +
            '"maxPerUser' + index + '": "",' +
            '"starting' + index + '": "",' +
            '"until' + index + '": ""' +
            '}'
        console.log(auxVar)
        console.log(JSON.parse(auxVar))

        setRowsData([...rowsData, JSON.parse(auxVar)])
        console.log(rowsData)
    }

    const deleteTableRows = (index)=>{
        const rows = [...rowsData];
        console.log(rows)
        rows.splice(index, 1);
        console.log(rows)
        setRowsData(rows);
    }

    const handleChange = (index, evnt)=>{
        const { name, value } = evnt.target;
        const rowsInput = [...rowsData];
        rowsInput[index][name] = value;
        console.log(rowsInput)
        setRowsData(rowsInput);
    }


    const onSubmit = async () => {
        console.log(rowsData)

        let tickets = []
        for (let x in rowsData) {
            tickets.push({})
            for (let y in rowsData[x]) {
                tickets[x][y.slice(0, -1)] = rowsData[x][y]
            }
        }

        console.log(tickets)

        // delete data.location
        // let i = 0
        // let tickets = []
        //
        // for (let x in data) {
        //     tickets.push({
        //         id: data[x],
        //         qty: location[i++]
        //     })
        // }
        //
        // console.log(tickets)
        //
        // const res = await postData(`${server}/api/tickets`, tickets);
        //
        // let json = await res.json();
    }

    return (
        <Layout>
            <Breadcrumb text={"My Events"}/>

            <section className="product-single">
                <div className="container">
                    <div className="product-single__content">
                        <img className={"product-gallery__image"} src={`data:image/png;base64,${aux.image}`} alt="My event image"/>
                        {/*<Image src={`data:image/png;base64,${aux.image}`} className="product-gallery__image" layout="raw" width={"400px"} height={"400px"}/>*/}
                        <Content product={event}/>
                    </div>

                    {/*<div>*/}
                    {/*    <table className="ticket-table">*/}
                    {/*        <thead>*/}
                    {/*            <tr>*/}
                    {/*                <th>Ticket name</th>*/}
                    {/*                <th>Price</th>*/}
                    {/*                <th>Quantity</th>*/}
                    {/*                <th>Booked</th>*/}
                    {/*                <th>Max p/ user</th>*/}
                    {/*                <th>Starting</th>*/}
                    {/*                <th>Until</th>*/}
                    {/*            </tr>*/}
                    {/*        </thead>*/}
                    {/*        {tickets && tickets.map((item: TicketType) => (*/}
                    {/*            <tbody key={item.ticketName}>*/}
                    {/*                <tr>*/}
                    {/*                    <td>{item.ticketName}</td>*/}
                    {/*                    <td>${item.price}</td>*/}
                    {/*                    <td>{item.qty}</td>*/}
                    {/*                    <td>{item.booked}</td>*/}
                    {/*                    <td>{item.maxPerUser}</td>*/}
                    {/*                    {item.starting && (*/}
                    {/*                        <td>{item.starting}</td>*/}
                    {/*                    )}*/}
                    {/*                    {item.until && (*/}
                    {/*                        <td>{item.until}</td>*/}
                    {/*                    )}*/}
                    {/*                </tr>*/}
                    {/*            </tbody>*/}
                    {/*        ))}*/}
                    {/*    </table>*/}
                    {/*</div>*/}

                    <form className="form" onSubmit={handleSubmit(onSubmit)}>
                        <table className="ticket-table">
                            <thead>
                            <tr>
                                <th>Ticket name</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Booked</th>
                                <th>Max p/ user</th>
                                <th>Starting</th>
                                <th>Until</th>
                                <th><button className="btn btn-outline-success" onClick={addTableRows}>+</button></th>
                            </tr>
                            </thead>
                            <tbody>
                                {/*<TableRows index={index} rowsData={rowsData} deleteTableRows={deleteTableRows} handleChange={handleChange} register={register} />*/}
                                {rowsData.map((data, index) => {
                                    // console.log(data)
                                   return (
                                        // console.log(data)
                                        // console.log(index)
                                        // const {ticketName, price, qty, booked, maxPerUser, starting, until} = data;
                                        // console.log("vamos por" + data["ticketName" + index])
                                        // let ticketName = data["ticketName" + index]
                                        //     let price = data["price" + index]
                                        //     let qty = data["price" + index]
                                        //     let booked = data["price" + index]
                                        //     let maxPerUser = data["price" + index]
                                        //     let starting = data["starting" + index]
                                        //     let until = data["until" + index]
                                        <tr key={index}>
                                            <td>
                                                <input type="text" {...register("ticketName" + index, { required: true })}
                                                       onChange={(evnt) => (handleChange(index, evnt))} value={rowsData[index]["ticketName"]}/>
                                            </td>
                                            <td><input type="number" {...register("price" + index, { required: true })} value={data[1]}
                                                       onChange={(evnt) => (handleChange(index, evnt))}
                                                       className="form-control"/></td>
                                            <td><input type="text" {...register("qty" + index, { required: true })} value={data[2]}
                                                       onChange={(evnt) => (handleChange(index, evnt))}
                                                       className="form-control"/></td>
                                            <td><input type="number" {...register("booked" + index, { required: true })} value={data[3]}
                                                       onChange={(evnt) => (handleChange(index, evnt))}
                                                       className="form-control"/></td>
                                            <td><input type="number" {...register("maxPerUser" + index, { required: true })} value={data[3]}
                                                       onChange={(evnt) => (handleChange(index, evnt))}
                                                       className="form-control"/></td>
                                            <td><input type="datetime-local" {...register("starting" + index)}
                                                       value={data[4]} onChange={(evnt) => (handleChange(index, evnt))}
                                                       className="form-control"/></td>
                                            <td>
                                                <input type="datetime-local" {...register("until" + index)}
                                                       className="form-control" onChange={(evnt) => (handleChange(index, evnt))}
                                                       value={data[5]}/>
                                            </td>
                                            <td>
                                                <button className="btn btn-outline-danger" onClick={() => (deleteTableRows(index))}>x</button>
                                            </td>
                                        </tr>
                                    )
                                })
                                }
                            </tbody>
                        </table>
                        <input type="submit" />
                    </form>

                    <div className="product-single__info">
                        <div className="product-single__info-btns">
                            <button type="button" onClick={() => setShowBlock('description')}
                                    className={`btn btn--rounded ${showBlock === 'description' ? 'btn--active' : ''}`}>Description
                            </button>
                            <button type="button" onClick={() => setShowBlock('reviews')}
                                    className={`btn btn--rounded ${showBlock === 'reviews' ? 'btn--active' : ''}`}>Reviews
                                (2)
                            </button>
                        </div>

                        <Description show={showBlock === 'description'}/>
                        {/*<Reviews product={product} show={showBlock === 'reviews'}/>*/}
                    </div>
                </div>
            </section>

            <div className="product-single-page">
                <ProductsFeatured/>
            </div>
            <Footer/>
        </Layout>
    );
}

export default Product
